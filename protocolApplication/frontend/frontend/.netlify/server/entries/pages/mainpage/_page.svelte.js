import { c as create_ssr_component, d as add_attribute, f as each, e as escape } from "../../../chunks/ssr.js";
import "../../../chunks/client.js";
const css = {
  code: "@keyframes svelte-n6kr07-gradientAnimation{0%{background-position:0% 50%}50%{background-position:100% 50%}100%{background-position:0% 50%}}.animated-background.svelte-n6kr07{background:linear-gradient(270deg, #ff7e5f, #feb47b);background-size:400% 400%;animation:svelte-n6kr07-gradientAnimation 15s ease infinite}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">\\n    import {TaskStore} from '../../task-store'\\n    import {onMount} from 'svelte'\\n    import {goto} from '$app/navigation';\\n\\n    let taskDiv = '';\\n\\n    async function fetchTask() {\\n       /*\\n       if (!$TaskStore.length){\\n         const endpoint = \\"http://localhost:8000/api/tasks/\\"\\n         const response = await fetch(endpoint)\\n         const data = await response.json()\\n         //console.log(data)\\n         TaskStore.set(data)\\n       }\\n       */\\n\\n       // Append new tasks\\n\\n       //var username=document.cookie;\\n\\n       //console.log(username)\\n\\n       let taskDiv = document.createElement('div');\\n       taskDiv.className = 'col-12 col-sm-6 col-md-4';\\n       taskDiv.id = \\"taskholder\\"\\n\\n       let response1 = await fetch(\\"http://localhost:8000/TaskFetched/\\",{\\n\\n            method: 'GET',\\n            credentials: \\"include\\"\\n\\n       })\\n\\n       var b= await response1.json()\\n\\n       console.log(b.taskDetail)\\n\\n       taskdetail = b.taskDetail;\\n\\n       console.log(taskdetail);\\n\\n       const start = performance.now();\\n\\n       b.taskDetail.forEach(task => {\\n\\n            taskDiv.innerHTML += \`\\n                <div id=\\"\${task.id}\\" class=\\"card w-100 h-100\\">\\n                    <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\" src=\\"\${task.image}\\" alt=\\"Task\\">\\n                    <div class=\\"card-body d-flex flex-column justify-content-between gap-4\\">\\n                        <div>\\n                            <h5 class=\\"card-title\\">\${task.name}</h5>\\n                            <p class=\\"card-text\\">ID: \${task.id}</p>\\n                            <p class=\\"card-text\\">Starting date by \${task.date}</p>\\n                            <p class=\\"card-text\\">Starting time by \${task.startTime}</p>\\n                            <p class=\\"card-text\\">Amount of time by \${task.amountOfTime}</p>\\n                            <p class=\\"card-text\\">The Description of the task \${task.descriptionOfTheTask}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            \`;\\n\\n       //document.body.appendChild(taskDiv);\\n\\n       })\\n\\n       taskDiv.style.visibility = \\"hidden\\";\\n\\n       if(document.body.contains(document.getElementById(\\"taskholder\\"))){\\n\\n          document.body.removeChild(document.getElementById(\\"taskholder\\"));\\n\\n       }\\n\\n       document.body.appendChild(taskDiv);\\n\\n       const end = performance.now();\\n\\n       console.log(\`DOM fetching time took \${end - start} milliseconds.\`);\\n\\n       /*\\n       $TaskStore.forEach(task => {\\n            taskDiv.innerHTML += \`\\n                <div id=\\"\${task.id}\\" style=\\"display: none; height: 100px;\\" class=\\"card w-100 h-100\\">\\n                    <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\" src=\\"\${task.image}\\" alt=\\"Task\\">\\n                    <div class=\\"card-body d-flex flex-column justify-content-between gap-4\\">\\n                        <div>\\n                            <h5 class=\\"card-title\\">\${task.name}</h5>\\n                            <p class=\\"card-text\\">ID: {task.id}</p>\\n                            <p class=\\"card-text\\">Starting date by \${task.date}</p>\\n                            <p class=\\"card-text\\">Starting time by \${task.startTime}</p>\\n                            <p class=\\"card-text\\">Amount of time by \${task.amountOfTime}</p>\\n                            <p class=\\"card-text\\">The Description of the task \${task.descriptionOfTheTask}</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            \`;\\n\\n       document.body.appendChild(taskDiv);\\n       });\\n\\n       */\\n\\n       console.log(document)\\n\\n       //document.body.removeChild(taskDiv);\\n\\n       console.log(document.getElementById(\\"7\\"))\\n\\n    }\\n\\n    let name = '';\\n    let name1 = '';\\n    let date = '';\\n    let startTime = '';\\n    let amountOfTime = '';\\n    let descriptionOfTheTask = '';\\n    let query;\\n    let amountOfCalories;\\n    let dietType;\\n    let mealType;\\n    let files;\\n    let showInvalidMessage = false;\\n    let showTaskList = false;\\n    let id;\\n    let idimage;\\n    let deleteid;\\n    let errorMessage = '';\\n    let errorMessageForDelete = '';\\n    let queryForVideos = '';\\n    let listOfFoodItems = '';\\n    let taskdetail = [];\\n\\n    async function handleSubmit(){\\n        //const endpoint = 'http://localhost:8000/api/tasks/'\\n        const a = 'http://localhost:8000/TaskInsert/'\\n        let data = new FormData()\\n        data.append('name', name)\\n        data.append('date', date)\\n        data.append('startTime', startTime)\\n        data.append('amountOfTime', amountOfTime)\\n        data.append('descriptionOfTheTask',descriptionOfTheTask)\\n        data.append('image', files[0])\\n\\n        let response = await fetch(a,{\\n\\n            method: 'POST',\\n            credentials: \\"include\\",\\n            body:data\\n\\n        })\\n\\n        var b= await response.json()\\n\\n        console.log(b.task_detail[0].id)\\n\\n        let element = document.getElementById('taskholder');\\n\\n        console.log(element);\\n\\n        if(element){\\n           console.log('Element with id \\"taskholder\\" exists.');\\n        }\\n\\n        else{\\n\\n           let taskDiv = document.createElement('div');\\n           taskDiv.className = 'col-12 col-sm-6 col-md-4';\\n           taskDiv.id = \\"taskholder\\"\\n           //taskDiv.innerHTML = \`\`;\\n           taskDiv.innerHTML = \`\`;\\n\\n           document.body.appendChild(taskDiv);\\n\\n        }\\n\\n        const start = performance.now();\\n\\n        document.getElementById(\\"taskholder\\").innerHTML +=\`\\n             <div id=\\"\${b.task_detail[0].id}\\" style=\\"display: none; height: 100px;\\" class=\\"card w-100 h-100\\">\\n              <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\" src=\\"\${b.task_detail[0].image}\\" alt=\\"Task\\">\\n              <div>\\n               <h5 class=\\"card-title\\">\${name}</h5>\\n               <p class=\\"card-text\\">ID: {b.task_detail[0].id}</p>\\n               <p class=\\"card-text\\">Starting date by \${date}</p>\\n               <p class=\\"card-text\\">Starting time by \${startTime}</p>\\n               <p class=\\"card-text\\">Amount of time by \${amountOfTime}</p>\\n               <p class=\\"card-text\\">The Description of the task \${descriptionOfTheTask}</p>\\n              </div>\\n             </div>\\n            </div>\\n        \`;\\n\\n        const end = performance.now();\\n\\n        console.log(\`DOM insertion time took \${end - start} milliseconds.\`);\\n\\n        /*\\n        fetch(endpoint, {method: 'POST', body: data}).then(response => response.json()).then(data => {\\n            TaskStore.update(prev => [...prev, data]),\\n            console.log(data.id)\\n\\n            document.getElementById(\\"taskholder\\").innerHTML +=\`\\n             <div id=\\"\${data.id}\\" style=\\"display: none; height: 100px;\\" class=\\"card w-100 h-100\\">\\n              <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\" src=\\"\${data.image}\\" alt=\\"Task\\">\\n              <div>\\n               <h5 class=\\"card-title\\">\${name}</h5>\\n               <p class=\\"card-text\\">ID: {task.id}</p>\\n               <p class=\\"card-text\\">Starting date by \${date}</p>\\n               <p class=\\"card-text\\">Starting time by \${startTime}</p>\\n               <p class=\\"card-text\\">Amount of time by \${amountOfTime}</p>\\n               <p class=\\"card-text\\">The Description of the task \${descriptionOfTheTask}</p>\\n              </div>\\n             </div>\\n            </div>\\n        \`;\\n        console.log(document)\\n\\n        })\\n\\n        */\\n\\n        console.log(document)\\n\\n        goto('/mainpage/')\\n    }\\n\\n    async function handleDelete(deleteid){\\n\\n        errorMessageForDelete = '';\\n\\n        /*\\n        const taskchecker = $TaskStore.find(task => task.id ==deleteid);\\n\\n        if(!taskchecker){\\n            errorMessageForDelete = 'Invalid task ID. Please enter a valid ID.';\\n            return;\\n        }\\n        */\\n\\n        let response = await fetch(\\"http://localhost:8000/TaskDelete/\\",{\\n\\n           method: 'POST',\\n           credentials: \\"include\\",\\n           body: JSON.stringify({\\n                task_id: deleteid,\\n           })\\n        })\\n\\n        /*\\n        if(response.status!=200){\\n            errorMessageForDelete = 'Invalid task ID. Please enter a valid ID.';\\n            return;\\n        }\\n\\n        else{\\n        */\\n\\n        taskdetail = taskdetail.filter(task => task.id !== deleteid);\\n\\n        const start = performance.now();\\n        document.getElementById(deleteid).innerHTML = \`\`;\\n        const end = performance.now();\\n\\n        console.log(\`DOM deletion time took \${end - start} milliseconds.\`);\\n\\n        /*\\n        }\\n        */\\n\\n        /*\\n        const endpoint = \`http://localhost:8000/api/tasks/\${deleteid}\`\\n        fetch(endpoint, {method: 'DELETE'}).then(response => {\\n            if (response.status == 204) {\\n                TaskStore.update(prev => prev.filter(task => task.id != deleteid))\\n            }\\n        })\\n        */\\n\\n        //document.getElementById(deleteid).innerHTML = \`\`;\\n\\n        console.log(document)\\n\\n    }\\n\\n    async function handleUpdate(){\\n\\n        //id = data.id\\n\\n        //console.log(\`\${id}\`);\\n\\n        //console.log(taskDiv);\\n\\n        errorMessage = '';\\n        //const taskchecker = $TaskStore.find(task => task.id ==id);\\n\\n        //if(!taskchecker){\\n        //    errorMessage = 'Invalid task ID. Please enter a valid ID.';\\n        //    return;\\n        //}\\n\\n        //const endpoint = \`http://localhost:8000/api/tasks/\${id}/\`\\n        let data = new FormData()\\n        data.append('id', id)\\n        data.append('name', name1)\\n        data.append('date', date)\\n        data.append('startTime', startTime)\\n        data.append('amountOfTime', amountOfTime)\\n        data.append('descriptionOfTheTask', descriptionOfTheTask)\\n\\n        //if (files) {\\n        data.append('image', files[0])\\n        //}\\n\\n        console.log(files)\\n\\n        let response = await fetch(\\"http://localhost:8000/TaskUpdate/\\",{\\n\\n           method: 'POST',\\n           credentials: \\"include\\",\\n           body: data\\n\\n        })\\n\\n        if(response.status!=200){\\n            errorMessage = 'Invalid task ID. Please enter a valid ID.';\\n            return;\\n        }\\n\\n        else{\\n\\n        let b= await response.json()\\n\\n        console.log(b)\\n\\n        console.log(files)\\n\\n        const start = performance.now();\\n\\n        document.getElementById(id).innerHTML = \`\\n            <div class=\\"card-body d-flex flex-column justify-content-between gap-4\\">\\n              <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\" src=\\"\${b.update_task[0].image}\\" alt=\\"Task\\">\\n              <div>\\n               <h5 class=\\"card-title\\">\${name1}</h5>\\n               <p class=\\"card-text\\">ID: \${id}</p>\\n               <p class=\\"card-text\\">Starting date by \${date}</p>\\n               <p class=\\"card-text\\">Starting time by \${startTime}</p>\\n               <p class=\\"card-text\\">Amount of time by \${amountOfTime}</p>\\n               <p class=\\"card-text\\">The Description of the task \${descriptionOfTheTask}</p>\\n              </div>\\n            </div>\\n        \`;\\n\\n         const end = performance.now()\\n\\n         console.log(\`DOM updating time took \${end - start} milliseconds.\`);\\n\\n        /*\\n\\n        fetch(endpoint, {method: 'PUT', body: data}).then(response => response.json()).then(data => {\\n            TaskStore.update(prev => {\\n                let updatedTasks = $TaskStore.slice()\\n                let index = updatedTasks.findIndex(task => task.id == id)\\n                updatedTasks[index] = data\\n                return updatedTasks\\n            })\\n        })\\n\\n        let taskimageURL = {}\\n\\n        taskimageURL = $TaskStore.find(task => task.id == id)\\n\\n        document.getElementById(id).innerHTML = \`\\n            <div class=\\"card-body d-flex flex-column justify-content-between gap-4\\">\\n              <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\" src=\\"\${taskimageURL.image}\\" alt=\\"Task\\">\\n              <div>\\n               <h5 class=\\"card-title\\">\${name}</h5>\\n               <p class=\\"card-text\\">Starting date by \${date}</p>\\n               <p class=\\"card-text\\">Starting time by \${startTime}</p>\\n               <p class=\\"card-text\\">Amount of time by \${amountOfTime}</p>\\n               <p class=\\"card-text\\">The Description of the task \${descriptionOfTheTask}</p>\\n              </div>\\n            </div>\\n        \`;\\n\\n         */\\n\\n        console.log(document)\\n\\n        }\\n\\n        /*\\n        let task = {}\\n\\n        if ($TaskStore.length) {\\n            task = $TaskStore.find(task => task.id == id)\\n        } else {\\n            const endpoint = \`http://localhost:8000/api/tasks/\${id}/\`\\n            let response = await fetch(endpoint)\\n            if (response.status == 200) {\\n                task = await response.json()\\n            } else {\\n                task = null;\\n            }\\n        }\\n        ({name, date, startTime, amountOfTime, descriptionOfTheTask} = task)\\n        */\\n\\n    }\\n\\n    async function handleVideos(){\\n\\n        document.getElementById(\\"returnedVideos\\").innerHTML = \`\`;\\n\\n        console.log(queryForVideos)\\n\\n        fetch('https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=5&q=' + queryForVideos + '&type=video&key=AIzaSyA20OFgpO9qgwShY_S5PBzh3_Uw2-o3v4k')\\n        .then(result => result.json())\\n        .then(data=>{\\n           console.log(data)\\n           data.items.forEach(a => {\\n               document.getElementById(\\"returnedVideos\\").innerHTML += \`\\n               <p class=\\"card-text\\">\\n               <a href=\\"https://www.youtube.com/watch?v=\${a.id.videoId}\\" class=\\"yt-=video\\">\\n                   <img src=\\"\${a.snippet.thumbnails.high.url}\\"/>\\n                   <h3>\${a.snippet.title}</h3>\\n               </a>\\n               </p><br><br>\\n               \`\\n           })\\n        })\\n\\n    }\\n\\n    async function calorieTracker(){\\n\\n       //try{\\n       const URLCalories = \\"https://api.edamam.com/api/nutrition-data?app_id=c5d32486&app_key=edd240211b6512dcb06d0ee3069929d3\\t&ingr=\\" + listOfFoodItems\\n       const response = await fetch(URLCalories);\\n       const data = await response.json();\\n       console.log(data);\\n       document.querySelector(\\"#calorietracker\\").innerHTML = \`<h3 class=\\"card-text\\">Calories in Kcal: \${data.calories}</h3>\`;\\n       //}\\n\\n       //catch(err){\\n\\n       //   document.querySelector(\\"#calorietracker\\").innerHTML = err.message;\\n\\n       //}\\n\\n       if(data.calories!=0){\\n\\n         var today = new Date();\\n         var dd = String(today.getDate()).padStart(2,'0');\\n         var mm = String(today.getMonth()+1).padStart(2,'0');\\n         var yyyy = today.getFullYear();\\n\\n         var today = \`\${dd}/\${mm}/\${yyyy}\`\\n\\n         var fd = new FormData();\\n         fd.append('listoffooditems', data.calories)\\n         fd.append('dateinserted', today)\\n         let response1 = await fetch(\\"http://localhost:8000/CalorieTracker/\\",{\\n            method: 'POST',\\n            credentials: \\"include\\",\\n            body: fd\\n         })\\n\\n       }\\n\\n    }\\n\\n    function settingTheVariableToTrue(){\\n\\n       showTaskList = true;\\n\\n    }\\n\\n\\n    async function handleEDAMAMAPI() {\\n     let APP_ID = \\"f0809293\\";\\n     let API_KEY = \\"4c9901ef9b16a44f50887e1926d8a00b\\";\\n     const URL = \\"https://api.edamam.com/api/recipes/v2?type=public&q=\\" + query + \\"&app_id=f0809293&app_key=4c9901ef9b16a44f50887e1926d8a00b&diet=\\" + dietType + \\"&calories=\\" + amountOfCalories + \\"&mealType=\\" + mealType;\\n     const response = await fetch(URL);\\n     const data = await response.json();\\n     console.log(data);\\n\\n     document.querySelector(\\"#content\\").innerHTML = \\"\\";\\n\\n     for (let i = 0; i < data.hits.length; i++) {\\n        for (let j = 0; j < data.hits[i].recipe.dishType.length; j++) {\\n            document.querySelector(\\"#content\\").innerHTML += \`\\n            <div class=\\"card\\" style=\\"width: 18rem;\\">\\n                <img src=\\"\${data.hits[i].recipe.image}\\" class=\\"card-img-top\\" alt=\\"...\\">\\n                <div class=\\"card-body\\">\\n                    <h5 class=\\"card-title\\">\${data.hits[i].recipe.label}</h5>\\n                    <p class=\\"card-text\\">Source: \${data.hits[i].recipe.source}</p>\\n                    <p class=\\"card-text\\">Meal Type: \${data.hits[i].recipe.mealType}</p>\\n                    <p class=\\"card-text\\">Diet Type: \${data.hits[i].recipe.dietLabels}</p>\\n                    <p class=\\"card-text\\">Calories in Kcal: \${Math.round(data.hits[i].recipe.calories)} kcal</p>\\n                    <p style=\\"background-color: powderblue;\\" class=\\"card-text\\">Here are the list of health labels to prevent your food allergies if you have any: \${data.hits[i].recipe.healthLabels}</p>\\n                    <a href=\\"\${data.hits[i].recipe.url}\\" class=\\"btn btn-primary\\">Click here to find more information about that recipe</a>\\n                </div>\\n            </div>\\n            \`;\\n            break;\\n        }\\n     }\\n   }\\n\\n\\n\\n<\/script>\\n\\n<style>\\n\\n@keyframes gradientAnimation {\\n    0% {\\n        background-position: 0% 50%;\\n    }\\n    50% {\\n        background-position: 100% 50%;\\n    }\\n    100% {\\n        background-position: 0% 50%;\\n    }\\n}\\n\\n.animated-background {\\n    background: linear-gradient(270deg, #ff7e5f, #feb47b);\\n    background-size: 400% 400%;\\n    animation: gradientAnimation 15s ease infinite;\\n}\\n\\n</style>\\n\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n\\n    <br><h2 class=\\"my-4\\">Add a Task</h2><br>\\n\\n    <div class=\\"col-12 col-md-6\\">\\n        <form on:submit|preventDefault={handleSubmit}>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"name1\\">Enter the name of the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"name\\" id=\\"name1\\" name=\\"name1\\" bind:value={name} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"date\\">Enter the date to start the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"date\\" placeholder=\\"date\\" id=\\"date1\\" name=\\"date\\" bind:value={date} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"time\\">Enter the time to start the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"time\\" placeholder=\\"start Time\\" id=\\"startTime1\\" name=\\"startTime\\" bind:value={startTime} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"amountOfTime\\">Enter the amount of time to spend the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"time\\" placeholder=\\"Amount of to spend\\" id=\\"amountOfTime1\\" name=\\"amountOfTime\\" bind:value={amountOfTime} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"descriptionOfTheTask\\">Write the description of the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"description of the task\\" id=\\"descriptionOfTheTask1\\" name=\\"descriptionOfTheTask\\" bind:value={descriptionOfTheTask} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"uploadingTheImage\\">Upload the image</legend><br>\\n                <input class=\\"form-control\\" type=\\"file\\" id=\\"image\\" name=\\"filename\\" bind:files required/>\\n            </div>\\n            <button class=\\"btn btn-primary\\" type=\\"submit\\">Submit</button>\\n        </form>\\n    </div>\\n\\n</div>\\n\\n<br>\\n\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n\\n    <form on:submit|preventDefault={fetchTask}>\\n\\n      <button class=\\"btn btn-primary\\" type=\\"submit\\">Fetch the tasks</button>\\n\\n    </form>\\n    <br>\\n\\n    <h2 class=\\"my-4\\">Task List</h2>\\n    <div class=\\"my-4 row\\">\\n        {#each taskdetail as task}\\n        <div class=\\"col-12 col-sm-6 col-md-4\\">\\n            <div class=\\"card w-100 h-100\\">\\n                <img class=\\"card-img-top\\" style=\\"height: 300px; object-fit: cover\\"\\n                    src={task.image}\\n                    alt=\\"Task\\">\\n                <div class=\\"card-body d-flex flex-column justify-content-between gap-4\\">\\n\\t\\t\\t\\t\\t<div>\\n                        <h5 class=\\"card-title\\">{task.name}</h5>\\n                        <p class=\\"card-text\\">ID: {task.id}</p>\\n                        <p class=\\"card-text\\">Starting date by {task.date}</p>\\n                        <p class=\\"card-text\\">Starting time by {task.startTime}</p>\\n                        <p class=\\"card-text\\">Amount of time by {task.amountOfTime}</p>\\n                        <p class=\\"card-text\\">The Description of the task {task.descriptionOfTheTask}</p>\\n                    </div>\\n                    <div>\\n                        <!--<a href=\\"/mainpage/{task.id}\\" class=\\"btn btn-primary\\">View</a>-->\\n\\n                        <a href=\\"/mainpage/{task.id}/update\\" class=\\"btn btn-primary\\">Update</a>\\n\\n                        <button on:click = {() => handleDelete(task.id)} class=\\"btn btn-danger ml-2\\">\\n                            Delete\\n                        </button>\\n\\n\\t\\t\\t\\t\\t</div>\\n                </div>\\n            </div>\\n        </div>\\n        {/each}\\n    </div>\\n</div>\\n<br>\\n\\n<!--\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n    <h2 class=\\"my-4\\">Diet Plan</h2>\\n\\n    <div class=\\"col-12 col-md-6\\">\\n        <form on:submit|preventDefault={handleEDAMAMAPI}>\\n            <div class=\\"mb-3\\">\\n                <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"query\\" bind:value={query} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"amount of calories in kcal\\" bind:value={amountOfCalories} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n            <h5 class=\\"my-4\\">Diet Type</h5>\\n            <select bind:value={dietType} required>\\n              <option value=\\"balance\\">Balance</option>\\n              <option value=\\"high-fiber\\">High-Fiber</option>\\n              <option value=\\"high-protein\\">High-Protein</option>\\n              <option value=\\"low-carb\\">Low-Carb</option>\\n              <option value=\\"low-fat\\">Low-Fat</option>\\n              <option value=\\"low-sodium\\">Low-Sodium</option>\\n            </select>\\n            </div>\\n            <div class=\\"mb-3\\">\\n            <h5 class=\\"mb-4\\">Meal Type</h5>\\n            <select bind:value={mealType} required>\\n              <option value=\\"breakfast\\">Breakfast</option>\\n              <option value=\\"brunch\\">Brunch</option>\\n              <option value=\\"lunch\\">Lunch</option>\\n              <option value=\\"dinner\\">Dinner</option>\\n              <option value=\\"snack\\">Snack</option>\\n              <option value=\\"teatime\\">TeaTime</option>\\n            </select>\\n            </div>\\n            <button class=\\"btn btn-primary\\" type=\\"submit\\">Submit</button>\\n        </form>\\n    </div>\\n    <div id=\\"content\\"></div>\\n\\n</div>\\n\\n<br>\\n-->\\n\\n<!--\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n\\n    <h2 class=\\"my-4\\">Update a Task</h2>\\n\\n    <div class=\\"col-12 col-md-6\\">\\n        <form on:submit|preventDefault={handleUpdate}>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"name\\">Enter the name of the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"name\\" bind:value={name1} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <legend for=\\"date\\">Enter the date to start the task</legend><br>\\n                <input class=\\"form-control\\" type=\\"date\\" placeholder=\\"date\\" bind:value={date} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <input class=\\"form-control\\" type=\\"time\\" placeholder=\\"start Time\\" bind:value={startTime} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <input class=\\"form-control\\" type=\\"time\\" placeholder=\\"Amount of to spend\\" bind:value={amountOfTime} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"description of the task\\" bind:value={descriptionOfTheTask} required/>\\n            </div>\\n            <div class=\\"mb-3\\">\\n                <input class=\\"form-control\\" type=\\"file\\" bind:files required/>\\n            </div>\\n\\n            <button class=\\"btn btn-primary\\" type=\\"submit\\">Submit</button>\\n        </form>\\n    </div>\\n\\n</div>\\n\\n<br>\\n-->\\n<!--\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n\\n   <h2 class=\\"my-4\\">Delete a Task</h2>\\n\\n   <div class=\\"col-12 col-md-6\\">\\n\\n      <form on:submit|preventDefault={handleDelete}>\\n         <div class=\\"mb-3\\">\\n             <input class=\\"form-control\\" type=\\"number\\" placeholder=\\"Type the id\\" bind:value={deleteid}/>\\n             {#if errorMessageForDelete}\\n               <p class=\\"text-danger\\">{errorMessageForDelete}</p>\\n             {/if}\\n         </div>\\n\\n         <button class=\\"btn btn-primary\\" type=\\"submit\\">Delete</button>\\n      </form>\\n   </div>\\n\\n</div>\\n-->\\n\\n<!--\\n<br>\\n\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n  <h2 class=\\"my-4\\">Find exercise videos</h2>\\n  <div class=\\"col-12 col-md-6\\">\\n     <form on:submit|preventDefault={handleVideos}>\\n      <label>Enter the exercise videos that you want:</label>\\n         <div class=\\"mb-3\\">\\n             <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"query\\" bind:value={queryForVideos}/>\\n         </div>\\n         <button class=\\"btn btn-primary\\" type=\\"submit\\">Fetch videos</button>\\n     </form>\\n  </div>\\n  <br>\\n  <br>\\n</div>\\n\\n<div>\\n   <div class=\\"card-body d-flex flex-column justify-content-between gap-4\\">\\n        <div id=\\"returnedVideos\\" class=\\"row\\">\\n        </div>\\n   </div>\\n</div>\\n\\n<br>\\n-->\\n\\n<!--\\n<div class=\\"p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background\\">\\n  <h2 class=\\"my-4\\">Calorie tracker</h2>\\n  <form on:submit|preventDefault={calorieTracker}>\\n    <label>Enter the food items here</label>\\n       <div class=\\"mb-3\\">\\n           <input class=\\"form-control\\" type=\\"text\\" placeholder=\\"Enter the food item\\" bind:value={listOfFoodItems}/>\\n       </div>\\n       <button class=\\"btn btn-primary\\" type=\\"submit\\">Fetch the amount of calories intaken</button>\\n  </form>\\n  <br>\\n  <div id=\\"calorietracker\\"></div>\\n</div>\\n\\n<br>\\n\\n<a href=\\"/mainpage/calorieHistory/\\"><button class=\\"btn btn-primary\\"  type=\\"submit\\">See your Calorie History</button></a><br><br>\\n\\n<br>\\n-->\\n"],"names":[],"mappings":"AAqgBA,WAAW,+BAAkB,CACzB,EAAG,CACC,mBAAmB,CAAE,EAAE,CAAC,GAC5B,CACA,GAAI,CACA,mBAAmB,CAAE,IAAI,CAAC,GAC9B,CACA,IAAK,CACD,mBAAmB,CAAE,EAAE,CAAC,GAC5B,CACJ,CAEA,kCAAqB,CACjB,UAAU,CAAE,gBAAgB,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CACrD,eAAe,CAAE,IAAI,CAAC,IAAI,CAC1B,SAAS,CAAE,+BAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,QAC1C"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let name = "";
  let date = "";
  let startTime = "";
  let amountOfTime = "";
  let descriptionOfTheTask = "";
  let taskdetail = [];
  $$result.css.add(css);
  return `<div class="p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background svelte-n6kr07"><br><h2 class="my-4" data-svelte-h="svelte-4yxv97">Add a Task</h2><br> <div class="col-12 col-md-6"><form><div class="mb-3"><legend for="name1" data-svelte-h="svelte-nt7tbr">Enter the name of the task</legend><br> <input class="form-control" type="text" placeholder="name" id="name1" name="name1" required${add_attribute("value", name, 0)}></div> <div class="mb-3"><legend for="date" data-svelte-h="svelte-ismxqo">Enter the date to start the task</legend><br> <input class="form-control" type="date" placeholder="date" id="date1" name="date" required${add_attribute("value", date, 0)}></div> <div class="mb-3"><legend for="time" data-svelte-h="svelte-whjzws">Enter the time to start the task</legend><br> <input class="form-control" type="time" placeholder="start Time" id="startTime1" name="startTime" required${add_attribute("value", startTime, 0)}></div> <div class="mb-3"><legend for="amountOfTime" data-svelte-h="svelte-4o6d26">Enter the amount of time to spend the task</legend><br> <input class="form-control" type="time" placeholder="Amount of to spend" id="amountOfTime1" name="amountOfTime" required${add_attribute("value", amountOfTime, 0)}></div> <div class="mb-3"><legend for="descriptionOfTheTask" data-svelte-h="svelte-4q5tui">Write the description of the task</legend><br> <input class="form-control" type="text" placeholder="description of the task" id="descriptionOfTheTask1" name="descriptionOfTheTask" required${add_attribute("value", descriptionOfTheTask, 0)}></div> <div class="mb-3"><legend for="uploadingTheImage" data-svelte-h="svelte-ykcx6a">Upload the image</legend><br> <input class="form-control" type="file" id="image" name="filename" required></div> <button class="btn btn-primary" type="submit" data-svelte-h="svelte-1b10frf">Submit</button></form></div></div> <br> <div class="p-3 mb-2 bg-light text-dark rounded shadow-sm animated-background svelte-n6kr07"><form data-svelte-h="svelte-1nwjbqx"><button class="btn btn-primary" type="submit">Fetch the tasks</button></form> <br> <h2 class="my-4" data-svelte-h="svelte-xw9njr">Task List</h2> <div class="my-4 row">${each(taskdetail, (task) => {
    return `<div class="col-12 col-sm-6 col-md-4"><div class="card w-100 h-100"><img class="card-img-top" style="height: 300px; object-fit: cover"${add_attribute("src", task.image, 0)} alt="Task"> <div class="card-body d-flex flex-column justify-content-between gap-4"><div><h5 class="card-title">${escape(task.name)}</h5> <p class="card-text">ID: ${escape(task.id)}</p> <p class="card-text">Starting date by ${escape(task.date)}</p> <p class="card-text">Starting time by ${escape(task.startTime)}</p> <p class="card-text">Amount of time by ${escape(task.amountOfTime)}</p> <p class="card-text">The Description of the task ${escape(task.descriptionOfTheTask)}</p></div> <div> <a href="${"/mainpage/" + escape(task.id, true) + "/update"}" class="btn btn-primary">Update</a> <button class="btn btn-danger ml-2" data-svelte-h="svelte-1fn4dzu">Delete
                        </button></div> </div></div> </div>`;
  })}</div></div> <br>     `;
});
export {
  Page as default
};
